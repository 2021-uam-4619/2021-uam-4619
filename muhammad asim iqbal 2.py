# -*- coding: utf-8 -*-
"""big data analytics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AeLqWTfHh3gqphzBEbMQ-uqVFqBdT651
"""

import pandas as pd

# Define the zsipper function to handle non-numeric data
def zsipper(*args):
    zipped_data = zip(*args)
    zipped_list = list(zipped_data)
    return zipped_list

# Load the data set
data = pd.read_json("/content/sample_data/anscombe.json")

# Check the data types
print(data.dtypes)
# Apply the zsipper function to the data set
data_zsipped = data.apply(zsipper)
# Print the zsipped data set
print(data_zsipped)
# Convert the 'X' and 'Y' columns to numeric values
data['X'] = pd.to_numeric(data['X'], errors='coerce')
data['Y'] = pd.to_numeric(data['Y'], errors='coerce')
# Apply the zsipper function to the data set
data_zsipped = data.apply(zsipper)
# Print the zsipped data set
print(data_zsipped)

# prompt: write a code to merg data set  using pyspark

# Import necessary libraries
from pyspark.sql import SparkSession

# Create a SparkSession
spark = SparkSession.builder.appName("MergeDataSets").getOrCreate()

# Load the first dataset into a DataFrame
df1 = spark.read.json("/content/sample_data/anscombe.json")

# Load the second dataset into a DataFrame
df2 = spark.read.csv("/content/sample_data/california_housing_train.csv")

# Merge the two DataFrames
merged_df = df1.union(df2)

# Print the merged DataFrame
merged_df.show()

import pandas as pd

# Define the zsipper function to handle non-numeric data and various zipper functionalities
def zsipper(*args, zipper_func=zip):
    try:
        zipped_data = zipper_func(*args)
        zipped_list = list(zipped_data)
        return zipped_list
    except Exception as e:
        print("Error occurred during zipping:", e)
        return None

# Load the data set
try:
    data = pd.read_json("/content/sample_data/anscombe.json")
except Exception as e:
    print("Error occurred while loading the data:", e)
    data = None
if data is not None:
    # Check the data types
    print(data.dtypes)
    # Apply the zsipper function to the data set
    data_zsipped = data.apply(zsipper)
    # Print the zsipped data set
    print(data_zsipped)

    # Convert the 'X' and 'Y' columns to numeric values
    try:
        data['X'] = pd.to_numeric(data['X'], errors='coerce')
        data['Y'] = pd.to_numeric(data['Y'], errors='coerce')
    except Exception as e:
        print("Error occurred while converting columns to numeric values:", e)

    if 'X' in data.columns and 'Y' in data.columns:
        # Apply the zsipper function to the data set after conversion
        data_zsipped_numeric = data.apply(zsipper)

        # Print the zsipped numeric data set
        print(data_zsipped_numeric)

import pandas as pd

# Define the zsipper function to handle non-numeric data
def zsipper(*args):
    try:
        zipped_data = zip(*args)
        zipped_list = list(zipped_data)
        return zipped_list
    except Exception as e:
        print("Error occurred during zipping:", e)
        return None

# Load the data set
data = pd.read_csv("/content/sample_data/california_housing_test.csv")

# Check the data types
print(data.dtypes)

# Apply the zsipper function to the data set
data_zsipped = data.apply(zsipper)

# Print the zsipped data set
print(data_zsipped)

# Check if 'X' and 'Y' columns exist before conversion
if 'X' in data.columns and 'Y' in data.columns:
    # Convert the 'X' and 'Y' columns to numeric values
    try:
        data['X'] = pd.to_numeric(data['X'], errors='coerce')
        data['Y'] = pd.to_numeric(data['Y'], errors='coerce')
    except:
        pass