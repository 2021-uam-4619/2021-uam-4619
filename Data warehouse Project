{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMfQEHD4DR+tk8kak9Q09TU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2021-uam-4619/2021-uam-4619/blob/main/Data%20warehouse%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 987
        },
        "id": "hwUtIJB48OK6",
        "outputId": "7c5f53ce-6e44-430a-e744-545fc5e65e8c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First few rows of the dataset:\n",
            "                                       [\n",
            "  {\"Series\":\"I\"  \"X\":10.0  \"Y\":8.04} NaN\n",
            "                 \"X\":8.0   \"Y\":6.95} NaN\n",
            "                 \"X\":13.0  \"Y\":7.58} NaN\n",
            "                 \"X\":9.0   \"Y\":8.81} NaN\n",
            "                 \"X\":11.0  \"Y\":8.33} NaN\n",
            "\n",
            "Summary statistics:\n",
            "         [\n",
            "count  0.0\n",
            "mean   NaN\n",
            "std    NaN\n",
            "min    NaN\n",
            "25%    NaN\n",
            "50%    NaN\n",
            "75%    NaN\n",
            "max    NaN\n",
            "\n",
            "Correlation matrix:\n",
            "    [\n",
            "[ NaN\n",
            "\n",
            "Missing values:\n",
            "[    45\n",
            "dtype: int64\n",
            "\n",
            "Unique values in each column:\n",
            "[ : 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "# Function to explore and evaluate datasets using descriptive statistical analyses\n",
        "def descriptive_statistical_analysis(data):\n",
        "    # Display the first few rows of the dataset\n",
        "    print(\"First few rows of the dataset:\")\n",
        "    print(data.head())\n",
        "    # Summary statistics\n",
        "    print(\"\\nSummary statistics:\")\n",
        "    print(data.describe())\n",
        "    # Correlation matrix\n",
        "    print(\"\\nCorrelation matrix:\")\n",
        "    print(data.corr())\n",
        "    # Missing values\n",
        "    print(\"\\nMissing values:\")\n",
        "    print(data.isnull().sum())\n",
        "    # Unique values in each column\n",
        "    print(\"\\nUnique values in each column:\")\n",
        "    for column in data.columns:\n",
        "        print(column, \":\", data[column].nunique())\n",
        "    # Histogram for numerical columns\n",
        "    numerical_columns = data.select_dtypes(include=['int64', 'float64']).columns\n",
        "    for column in numerical_columns:\n",
        "        data[column].hist()\n",
        "        plt.title(column)\n",
        "        plt.show()\n",
        "# Function to critique the limitations of statistical models\n",
        "def critique_statistical_models():\n",
        "    # You can write your critique here based on the limitations you observe in the models applied to the data\n",
        "    pass\n",
        "# Function to utilize current software tools and languages to produce and document result sets from existing data\n",
        "def produce_result_sets(data):\n",
        "    # You can perform further analysis here and produce result sets\n",
        "    pass\n",
        "# Load your dataset\n",
        "# Replace 'your_dataset.csv' with the path to your dataset file\n",
        "data = pd.read_csv('/content/sample_data/asim.json')\n",
        "# Call the function for descriptive statistical analysis\n",
        "descriptive_statistical_analysis(data)\n",
        "# Call the function to critique the limitations of statistical models\n",
        "critique_statistical_models()\n",
        "# Call the function to produce and document result sets from existing data\n",
        "produce_result_sets(data)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Function to explore and evaluate datasets using descriptive statistical analyses\n",
        "def descriptive_statistical_analysis(data):\n",
        "    # Display the first few rows of the dataset\n",
        "    print(\"First few rows of the dataset:\")\n",
        "    print(data.head())\n",
        "\n",
        "    # Summary statistics\n",
        "    print(\"\\nSummary statistics:\")\n",
        "    print(data.describe())\n",
        "\n",
        "    # Correlation matrix\n",
        "    print(\"\\nCorrelation matrix:\")\n",
        "    print(data.corr())\n",
        "\n",
        "    # Missing values\n",
        "    print(\"\\nMissing values:\")\n",
        "    print(data.isnull().sum())\n",
        "\n",
        "    # Unique values in each column\n",
        "    print(\"\\nUnique values in each column:\")\n",
        "    for column in data.columns:\n",
        "        print(column, \":\", data[column].nunique())\n",
        "\n",
        "# Load the dataset from the JSON file\n",
        "data = pd.read_json('/content/sample_data/asim.json')\n",
        "\n",
        "# Exclude non-numeric columns from analysis (e.g., 'Series')\n",
        "numeric_data = data.select_dtypes(include=['int64', 'float64'])\n",
        "\n",
        "# Call the function for descriptive statistical analysis\n",
        "descriptive_statistical_analysis(numeric_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jp_MgpkE8VPn",
        "outputId": "7a11e2e7-94f6-4244-daf4-3f34aee55c02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First few rows of the dataset:\n",
            "    X     Y\n",
            "0  10  8.04\n",
            "1   8  6.95\n",
            "2  13  7.58\n",
            "3   9  8.81\n",
            "4  11  8.33\n",
            "\n",
            "Summary statistics:\n",
            "               X          Y\n",
            "count  44.000000  44.000000\n",
            "mean    9.000000   7.500455\n",
            "std     3.198837   1.959244\n",
            "min     4.000000   3.100000\n",
            "25%     7.000000   6.117500\n",
            "50%     8.000000   7.520000\n",
            "75%    11.000000   8.747500\n",
            "max    19.000000  12.740000\n",
            "\n",
            "Correlation matrix:\n",
            "          X         Y\n",
            "X  1.000000  0.816308\n",
            "Y  0.816308  1.000000\n",
            "\n",
            "Missing values:\n",
            "X    0\n",
            "Y    0\n",
            "dtype: int64\n",
            "\n",
            "Unique values in each column:\n",
            "X : 12\n",
            "Y : 43\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "S0d8_WjTBHZi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}